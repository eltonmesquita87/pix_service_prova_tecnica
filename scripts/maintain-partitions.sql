-- ============================================================================
-- Script de Manuten√ß√£o de Parti√ß√µes
-- ============================================================================
-- Objetivo: Criar parti√ß√µes futuras automaticamente (executar mensalmente)
-- Frequ√™ncia: 1x por m√™s (primeiro dia do m√™s √†s 00:00)
-- M√©todo: Manual via psql ou automatizado via pg_cron
-- ============================================================================

-- ============================================================================
-- FUN√á√ÉO: Criar Pr√≥xima Parti√ß√£o
-- ============================================================================
CREATE OR REPLACE FUNCTION create_next_partition(
    p_table_name TEXT,
    p_months_ahead INTEGER DEFAULT 3
) RETURNS TEXT AS $$
DECLARE
    partition_name TEXT;
    partition_start DATE;
    partition_end DATE;
    sql_command TEXT;
    partitions_created INTEGER := 0;
    result_message TEXT := '';
BEGIN
    -- Loop para criar m√∫ltiplas parti√ß√µes futuras
    FOR i IN 1..p_months_ahead LOOP
        -- Calcular in√≠cio e fim da parti√ß√£o
        partition_start := DATE_TRUNC('month', CURRENT_DATE + (i || ' months')::INTERVAL)::DATE;
        partition_end := DATE_TRUNC('month', CURRENT_DATE + ((i + 1) || ' months')::INTERVAL)::DATE;

        -- Gerar nome da parti√ß√£o (formato: table_YYYY_MM)
        partition_name := p_table_name || '_' || TO_CHAR(partition_start, 'YYYY_MM');

        -- Verificar se parti√ß√£o j√° existe
        IF NOT EXISTS (
            SELECT 1 FROM pg_tables
            WHERE tablename = partition_name
        ) THEN
            -- Criar parti√ß√£o
            sql_command := FORMAT(
                'CREATE TABLE %I PARTITION OF %I FOR VALUES FROM (%L) TO (%L)',
                partition_name,
                p_table_name,
                partition_start,
                partition_end
            );

            EXECUTE sql_command;
            partitions_created := partitions_created + 1;

            result_message := result_message || FORMAT('‚úì Criada parti√ß√£o %s [%s - %s]', partition_name, partition_start, partition_end) || E'\n';
        ELSE
            result_message := result_message || FORMAT('‚Ä¢ Parti√ß√£o %s j√° existe', partition_name) || E'\n';
        END IF;
    END LOOP;

    result_message := FORMAT('Parti√ß√µes criadas para %s: %s/%s', p_table_name, partitions_created, p_months_ahead) || E'\n' || result_message;

    RETURN result_message;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- FUN√á√ÉO: Manuten√ß√£o Autom√°tica de Todas as Tabelas Particionadas
-- ============================================================================
CREATE OR REPLACE FUNCTION maintain_all_partitions() RETURNS TEXT AS $$
DECLARE
    result_message TEXT := '';
BEGIN
    result_message := '========================================' || E'\n';
    result_message := result_message || 'MANUTEN√á√ÉO DE PARTI√á√ïES - ' || TO_CHAR(NOW(), 'YYYY-MM-DD HH24:MI:SS') || E'\n';
    result_message := result_message || '========================================' || E'\n\n';

    -- Criar parti√ß√µes futuras para ledger_entries
    result_message := result_message || 'üìä LEDGER_ENTRIES:' || E'\n';
    result_message := result_message || create_next_partition('ledger_entries', 3) || E'\n';

    -- Criar parti√ß√µes futuras para pix_transfers
    result_message := result_message || 'üí∏ PIX_TRANSFERS:' || E'\n';
    result_message := result_message || create_next_partition('pix_transfers', 3) || E'\n';

    -- Criar parti√ß√µes futuras para webhook_events
    result_message := result_message || 'üîî WEBHOOK_EVENTS:' || E'\n';
    result_message := result_message || create_next_partition('webhook_events', 3) || E'\n';

    result_message := result_message || '========================================' || E'\n';
    result_message := result_message || 'MANUTEN√á√ÉO CONCLU√çDA' || E'\n';
    result_message := result_message || '========================================' || E'\n';

    RETURN result_message;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- EXECUTAR MANUTEN√á√ÉO MANUAL
-- ============================================================================
-- Descomentar para executar imediatamente:
-- SELECT maintain_all_partitions();

-- ============================================================================
-- FUN√á√ÉO: Arquivar Parti√ß√µes Antigas
-- ============================================================================
CREATE OR REPLACE FUNCTION archive_old_partitions(
    p_table_name TEXT,
    p_retention_months INTEGER
) RETURNS TEXT AS $$
DECLARE
    partition_record RECORD;
    partition_max_date TIMESTAMP;
    cutoff_date DATE;
    sql_command TEXT;
    partitions_archived INTEGER := 0;
    result_message TEXT := '';
BEGIN
    -- Calcular data de corte (reten√ß√£o)
    cutoff_date := DATE_TRUNC('month', CURRENT_DATE - (p_retention_months || ' months')::INTERVAL)::DATE;

    result_message := FORMAT('Data de corte (reten√ß√£o %s meses): %s', p_retention_months, cutoff_date) || E'\n';

    -- Listar parti√ß√µes candidatas a arquivamento
    FOR partition_record IN
        SELECT
            inhrelid::regclass::TEXT AS partition_name
        FROM pg_inherits
        WHERE inhparent = p_table_name::regclass
    LOOP
        -- Obter data m√°xima da parti√ß√£o (simplificado - usar coluna created_at/processed_at)
        EXECUTE FORMAT(
            'SELECT MAX(created_at) FROM %I',
            partition_record.partition_name
        ) INTO partition_max_date;

        -- Se parti√ß√£o est√° fora do per√≠odo de reten√ß√£o
        IF partition_max_date IS NOT NULL AND partition_max_date::DATE < cutoff_date THEN
            result_message := result_message || FORMAT(
                '‚ö†Ô∏è  Parti√ß√£o %s candidata a arquivamento (√∫ltima data: %s)',
                partition_record.partition_name,
                partition_max_date::DATE
            ) || E'\n';

            partitions_archived := partitions_archived + 1;

            -- OP√á√ÉO 1: Detach (desanexar parti√ß√£o sem dropar)
            -- sql_command := FORMAT('ALTER TABLE %I DETACH PARTITION %I', p_table_name, partition_record.partition_name);
            -- EXECUTE sql_command;
            -- result_message := result_message || FORMAT('  ‚Üí Parti√ß√£o %s DETACHED', partition_record.partition_name) || E'\n';

            -- OP√á√ÉO 2: Export para arquivo (implementar ETL externo)
            -- result_message := result_message || FORMAT('  ‚Üí Execute: pg_dump -t %s > archive/%s.sql', partition_record.partition_name, partition_record.partition_name) || E'\n';

            -- OP√á√ÉO 3: Drop (CUIDADO - perda de dados!)
            -- sql_command := FORMAT('DROP TABLE %I', partition_record.partition_name);
            -- EXECUTE sql_command;
            -- result_message := result_message || FORMAT('  ‚Üí Parti√ß√£o %s DROPPED', partition_record.partition_name) || E'\n';
        END IF;
    END LOOP;

    IF partitions_archived = 0 THEN
        result_message := result_message || '‚úì Nenhuma parti√ß√£o candidata a arquivamento' || E'\n';
    ELSE
        result_message := result_message || FORMAT('Total de parti√ß√µes candidatas: %s', partitions_archived) || E'\n';
        result_message := result_message || '‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA: Revisar e executar arquivamento manual' || E'\n';
    END IF;

    RETURN result_message;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- FUN√á√ÉO: Verificar Sa√∫de das Parti√ß√µes
-- ============================================================================
CREATE OR REPLACE FUNCTION check_partition_health() RETURNS TABLE(
    table_name TEXT,
    partition_name TEXT,
    partition_size TEXT,
    row_count BIGINT,
    min_date TIMESTAMP,
    max_date TIMESTAMP,
    bloat_pct NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    WITH partition_info AS (
        SELECT
            inhparent::regclass::TEXT AS parent_table,
            inhrelid::regclass::TEXT AS child_partition,
            pg_size_pretty(pg_total_relation_size(inhrelid)) AS size,
            c.reltuples::BIGINT AS estimated_rows
        FROM pg_inherits
        JOIN pg_class c ON c.oid = inhrelid
        WHERE inhparent::regclass::TEXT IN ('ledger_entries', 'pix_transfers', 'webhook_events')
    ),
    partition_stats AS (
        SELECT
            'ledger_entries'::TEXT AS tbl,
            tableoid::regclass::TEXT AS part,
            COUNT(*) AS rows,
            MIN(created_at) AS min_dt,
            MAX(created_at) AS max_dt
        FROM ledger_entries
        GROUP BY tableoid

        UNION ALL

        SELECT
            'pix_transfers'::TEXT,
            tableoid::regclass::TEXT,
            COUNT(*),
            MIN(created_at),
            MAX(created_at)
        FROM pix_transfers
        GROUP BY tableoid

        UNION ALL

        SELECT
            'webhook_events'::TEXT,
            tableoid::regclass::TEXT,
            COUNT(*),
            MIN(processed_at),
            MAX(processed_at)
        FROM webhook_events
        GROUP BY tableoid
    )
    SELECT
        pi.parent_table,
        pi.child_partition,
        pi.size,
        COALESCE(ps.rows, 0),
        ps.min_dt,
        ps.max_dt,
        0::NUMERIC AS bloat_percentage -- Placeholder (c√°lculo de bloat requer query complexa)
    FROM partition_info pi
    LEFT JOIN partition_stats ps ON ps.part = pi.child_partition
    ORDER BY pi.parent_table, pi.child_partition;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- EXECUTAR VERIFICA√á√ïES
-- ============================================================================

-- Verificar sa√∫de das parti√ß√µes
-- SELECT * FROM check_partition_health();

-- Verificar parti√ß√µes candidatas a arquivamento (exemplo: reten√ß√£o de 12 meses)
-- SELECT archive_old_partitions('ledger_entries', 12);
-- SELECT archive_old_partitions('pix_transfers', 24);
-- SELECT archive_old_partitions('webhook_events', 6);

-- ============================================================================
-- CONFIGURAR AUTOMA√á√ÉO COM pg_cron (OPCIONAL)
-- ============================================================================
-- Pr√©-requisito: Instalar extens√£o pg_cron
-- CREATE EXTENSION IF NOT EXISTS pg_cron;

-- Agendar manuten√ß√£o mensal (primeiro dia do m√™s √†s 00:00)
-- SELECT cron.schedule(
--     'partition_maintenance',
--     '0 0 1 * *',
--     $$SELECT maintain_all_partitions()$$
-- );

-- Verificar jobs agendados
-- SELECT * FROM cron.job;

-- Remover job (se necess√°rio)
-- SELECT cron.unschedule('partition_maintenance');

-- ============================================================================
-- COMENT√ÅRIOS FINAIS
-- ============================================================================
COMMENT ON FUNCTION create_next_partition IS 'Cria parti√ß√µes futuras para uma tabela espec√≠fica (padr√£o: 3 meses √† frente)';
COMMENT ON FUNCTION maintain_all_partitions IS 'Executa manuten√ß√£o em todas as tabelas particionadas (criar parti√ß√µes futuras)';
COMMENT ON FUNCTION archive_old_partitions IS 'Identifica parti√ß√µes candidatas a arquivamento baseado em pol√≠tica de reten√ß√£o';
COMMENT ON FUNCTION check_partition_health IS 'Verifica sa√∫de das parti√ß√µes (tamanho, contagem, datas, bloat)';
